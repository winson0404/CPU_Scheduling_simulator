{"ast":null,"code":"export const structureBuilder = (data, algorithmName) => {\n  const output = [[{\n    type: \"string\",\n    id: \"Position\"\n  }, {\n    type: \"string\",\n    id: \"Name\"\n  }, {\n    type: \"number\",\n    id: \"Start\"\n  }, {\n    type: \"number\",\n    id: \"End\"\n  }]];\n\n  for (let i = 0; i < (data === null || data === void 0 ? void 0 : (_data$processSequence = data.processSequence) === null || _data$processSequence === void 0 ? void 0 : _data$processSequence.length); i++) {\n    var _data$processSequence;\n\n    let tempOutput = [];\n    tempOutput.push(algorithmName);\n    tempOutput.push(data === null || data === void 0 ? void 0 : data.processSequence[i]);\n    tempOutput.push(parseInt(data === null || data === void 0 ? void 0 : data.timeSequence[i]) * 1000);\n    tempOutput.push(parseInt(data === null || data === void 0 ? void 0 : data.timeSequence[i + 1]) * 1000); // console.log(\"tempOutput==>\", tempOutput);\n\n    output.push(tempOutput);\n  }\n\n  return output;\n};","map":{"version":3,"sources":["/home/skessler/Programming/CPU_Scheduling_simulator/cpu-scheduling-simulator/src/components/structureBuilder/index.tsx"],"names":["structureBuilder","data","algorithmName","output","type","id","i","processSequence","length","tempOutput","push","parseInt","timeSequence"],"mappings":"AAAA,OAAO,MAAMA,gBAAgB,GAAG,CAACC,IAAD,EAAYC,aAAZ,KAAsC;AACrE,QAAMC,MAAW,GAAG,CACnB,CACC;AAAEC,IAAAA,IAAI,EAAE,QAAR;AAAkBC,IAAAA,EAAE,EAAE;AAAtB,GADD,EAEC;AAAED,IAAAA,IAAI,EAAE,QAAR;AAAkBC,IAAAA,EAAE,EAAE;AAAtB,GAFD,EAGC;AAAED,IAAAA,IAAI,EAAE,QAAR;AAAkBC,IAAAA,EAAE,EAAE;AAAtB,GAHD,EAIC;AAAED,IAAAA,IAAI,EAAE,QAAR;AAAkBC,IAAAA,EAAE,EAAE;AAAtB,GAJD,CADmB,CAApB;;AASG,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAGL,IAAH,aAAGA,IAAH,gDAAGA,IAAI,CAAEM,eAAT,0DAAG,sBAAuBC,MAA1B,CAAjB,EAAmDF,CAAC,EAApD,EAAuD;AAAA;;AACnD,QAAIG,UAAU,GAAG,EAAjB;AAEAA,IAAAA,UAAU,CAACC,IAAX,CAAgBR,aAAhB;AACAO,IAAAA,UAAU,CAACC,IAAX,CAAgBT,IAAhB,aAAgBA,IAAhB,uBAAgBA,IAAI,CAAEM,eAAN,CAAsBD,CAAtB,CAAhB;AACAG,IAAAA,UAAU,CAACC,IAAX,CAAgBC,QAAQ,CAACV,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEW,YAAN,CAAmBN,CAAnB,CAAD,CAAR,GAAgC,IAAhD;AACAG,IAAAA,UAAU,CAACC,IAAX,CAAgBC,QAAQ,CAACV,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEW,YAAN,CAAmBN,CAAC,GAAC,CAArB,CAAD,CAAR,GAAkC,IAAlD,EANmD,CAQnD;;AACAH,IAAAA,MAAM,CAACO,IAAP,CAAYD,UAAZ;AACH;;AAEJ,SAAON,MAAP;AACA,CAvBM","sourcesContent":["export const structureBuilder = (data: any, algorithmName: string) => {\n\tconst output: any = [\n\t\t[\n\t\t\t{ type: \"string\", id: \"Position\" },\n\t\t\t{ type: \"string\", id: \"Name\" },\n\t\t\t{ type: \"number\", id: \"Start\" },\n\t\t\t{ type: \"number\", id: \"End\" },\n\t\t],\n\t];\n\n    for (let i = 0; i < data?.processSequence?.length; i++){\n        let tempOutput = [];\n\n        tempOutput.push(algorithmName);\n        tempOutput.push(data?.processSequence[i]);\n        tempOutput.push(parseInt(data?.timeSequence[i])*1000);\n        tempOutput.push(parseInt(data?.timeSequence[i+1])*1000);\n\n        // console.log(\"tempOutput==>\", tempOutput);\n        output.push(tempOutput);\n    }\n\n\treturn output;\n};\n"]},"metadata":{},"sourceType":"module"}